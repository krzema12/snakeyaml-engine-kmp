package it.krzeminski.copydsl.impl

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Resolver
import com.google.devtools.ksp.processing.SymbolProcessor
import com.google.devtools.ksp.symbol.KSAnnotated
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.TypeName
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.ksp.toTypeName
import com.squareup.kotlinpoet.ksp.writeTo

class CopyDslSymbolProcessor(
    private val codeGenerator: CodeGenerator,
) : SymbolProcessor {
    private var wasRun = false

    override fun process(resolver: Resolver): List<KSAnnotated> {
        if (wasRun) {
            return emptyList()
        }
        wasRun = true
        println("Symbols annotated with @CopyDsl:")
        resolver.getSymbolsWithAnnotation("it.krzeminski.copydsl.api.CopyDsl").forEach { symbol ->
            println(symbol)
            if (symbol is KSClassDeclaration) {
                val fileSpec = FileSpec
                    .builder(packageName = symbol.packageName.asString(), fileName = symbol.simpleName.asString() + "CopyDsl")
                    .addFileComment("This file was generated by copy-dsl-ksp-processor. Do not edit manually.")
                    .addType(TypeSpec.interfaceBuilder("Mutable${symbol.simpleName.asString()}")
                        .build())
                    .addFunction(
                        FunSpec.builder("copy")
                            .receiver(symbol.asType(emptyList()).toTypeName())
                            .build()
                    )
                    .build()
                fileSpec.writeTo(codeGenerator = codeGenerator, aggregating = false)
            }
        }
        return emptyList()
    }
}
