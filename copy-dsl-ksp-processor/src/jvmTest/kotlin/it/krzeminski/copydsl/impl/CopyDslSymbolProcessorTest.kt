package it.krzeminski.copydsl.impl

import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.configureKsp
import com.tschuchort.compiletesting.kspSourcesDir
import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.shouldBe
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi

@OptIn(ExperimentalCompilerApi::class)
class CopyDslSymbolProcessorTest : FunSpec({
    test("success case") {
        // Given
        val source = SourceFile.kotlin(
            name = "MyClass.kt",
            contents = """
                package some.cool.pkg

                import it.krzeminski.copydsl.api.CopyDsl

                @CopyDsl
                class MyClass(
                    val foo: String,
                    val bar: Int?,
                    val baz: Long = 5,
                )
            """.trimIndent(),
        )
        val compilation = KotlinCompilation().apply {
            sources = listOf(source)
            inheritClassPath = true

            configureKsp {
                symbolProcessorProviders.add(CopyDslSymbolProcessorProvider())
            }
        }

        // When
        val result = compilation.compile()

        // Then
        result.exitCode shouldBe KotlinCompilation.ExitCode.OK
        val generatedFile = compilation.kspSourcesDir.resolve("kotlin/some/cool/pkg/MyClassCopyDsl.kt").readText()
        // language="kotlin"
        generatedFile shouldBe """// This file was generated by copy-dsl-ksp-processor. Do not edit manually.
package some.cool.pkg

import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Unit

public interface MutableMyClass {
  public var foo: String

  public var bar: Int?

  public var baz: Long
}

public fun MyClass.copy(modifications: MutableMyClass.() -> Unit): MyClass {
  val result = object : MutableMyClass {
    override var foo: String = this@copy.foo

    override var bar: Int? = this@copy.bar

    override var baz: Long = this@copy.baz
  }.apply(modifications)
  return MyClass(foo = result.foo, bar = result.bar, baz = result.baz)
}
"""
    }
})
